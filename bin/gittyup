#!/usr/bin/env node
var celeri = require('celeri'),
gittyup    = require('../')(),
cfg   = require('yaconfig').file('/etc/gittyup/apps.json'),
moment = require('moment');


function gup(app, max) {
	return gittyup.app({ name: app, maxRecords: max });
}


celeri.onCommand({ command: 'checkout :name :repo OR checkout :name', desc: 'checks out a repository'}, function(request) {

	var data = this.data,
	name = data.name,
	gap = gup(name, data.records || 20),
	repo = decodeURIComponent(data.repo || cfg.get(name+':repository'));


	var em = gap.checkout(repo, function(err, result) {
		
		cfg.set(name+':repository', repo);

		gap.process(function(err, process) {
			
			process.restart(function(err, result) {
				
			});
		});
	});

	em.on('error', function(data) {
		console.log(data);
	});

	em.on('data', function(data) {
		console.log(data);
	});
});

celeri.onCommand({ command: 'use :name :release', desc: 'Uses a repo'}, function(request) {

	var data = this.data, gap = gup(data.name);

	gap.findCheckout({ release: data.release.substr(1) }, function(err, item) {
		if(!item) return console.error('release does not exist');
		gap.use(item._id, function(err, item) { 
			
			gap.process(function(err, process) {
				process.restart(function(err, result) {
					
				});
			});
		});
	});

	
});

celeri.onCommand({ command: 'history :name', desc: 'Repo history'}, function(request) {

	var data = this.data,
	name = data.name,
	gap = gup(name);

	gap.history(function(err, items) {

		gap.current(function(err, cur) {
			
			items.sort(function(a, b) {
				return a.createdAt > b.createdAt ? 1 : -1;
			});

			celeri.table(items, {
				columns: [{
					name: function(item) {
						return (item.release == cur.release ? 'o' : '-')+' r'+item.release;
					},
					width: 10
				},
				{
					name: function(item) {
						return moment(item.createdAt).fromNow()
					}
				}]
			});
		});
	});
});

celeri.onCommand({ command: 'rollback :name', desc: 'Rollback a repositoriy'}, function(request) {

	var data = this.data,
	name = data.name,
	gap = gup(name);

	gap.rollback(function(err, items) {
		gap.process(function(err, process) {
			process.restart(function(err, result) {
				
			});
		});
	});
});






celeri.parse(process.argv);